im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
## Find contours in region of interest
roi_c <- roi[roi$value >= .08,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
## Find contours in region of interest
roi_c <- roi[roi$value >= .1,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
## Find contours in region of interest
roi_c <- roi[roi$value >= .12,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
ss_image2 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0476_02586.jpg"
im2 <- load.image(ss_image2)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new)
## Find contours in region of interest
roi_c <- roi[roi$value >= .10,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
ss_image2 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0476_02586.jpg"
im2 <- load.image(ss_image2)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new)
## Find contours in region of interest
roi_c <- roi[roi$value >= .08,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
ss_image2 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0476_02586.jpg"
im2 <- load.image(ss_image2)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new)
## Find contours in region of interest
roi_c <- roi[roi$value >= .06,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
ss_image2 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0476_02586.jpg"
im2 <- load.image(ss_image2)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
## Find contours in region of interest
roi_c <- roi[roi$value >= .06,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new)
## Find contours in region of interest
roi_c <- roi[roi$value >= .05,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_c$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("red")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new)
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
red <- im1
red[,,,c(2:3)] <- c(0,0)
green <- im1
green[,,,c(1,3)] <- c(0,0)
blue <- im1
blue[,,,1:2] <- c(0,0)
par(mfrow = c(1,3), mar = c(.1,.1,.1,.1))
plot(red, axes = F)
plot(green, axes = F)
plot(blue, axes = F)
library(contourr)
#install.packages("imager") # just first time to get the package
library(imager)
#install.packages("dplyr")
library(dplyr)
#install.packages("qpdf")
library(qpdf)
#install.packages(c("devtools", "dplyr", "imager", "stringr"))
library(devtools)
library(stringr)
library(usethis)
#devtools::install_github("kaitlynstrickfaden/contourr", build_vignettes = TRUE)
library(contourr)
ss_image1 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0220_01053.jpg"
ct_find(ss_image1)
ct_find(ss_image1, contourvalue = .08)
ct_find(ss_image1, contourvalue = .08)
ct_find(ss_image1, contourvalue = .05)
#install.packages("imager") # just first time to get the package
library(imager)
#install.packages("dplyr")
library(dplyr)
#install.packages("qpdf")
library(qpdf)
#install.packages(c("devtools", "dplyr", "imager", "stringr"))
library(devtools)
library(stringr)
library(usethis)
#devtools::install_github("kaitlynstrickfaden/contourr", build_vignettes = TRUE)
library(contourr)
ss_image1 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0220_01053.jpg"
im1 <- load.image(ss_image)
red <- im1
ss_image1 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0220_01053.jpg"
im1 <- load.image(ss_image)
ss_image1 <- "C://Users/stri7929/Documents/Snow Modeling/19-20_Analysis/Snowstake_Photos/IDFG0220_01053.jpg"
im1 <- load.image(ss_image1)
im1_df <- as.data.frame(im1)
im1_df$id <- rep(1:(dim(im1)[1] * dim(im1)[2]), times = 3)
plot(im1)
red <- im1
red[,,,c(2:3)] <- c(0,0)
green <- im1
green[,,,c(1,3)] <- c(0,0)
blue <- im1
blue[,,,1:2] <- c(0,0)
par(mfrow = c(1,3), mar = c(.1,.1,.1,.1))
plot(red, axes = F)
plot(green, axes = F)
plot(blue, axes = F)
par(mar = c(1,.1,1,.1))
im1_xy <- imgradient(grayscale(im1), "xy")
plot(im1_xy, layout = "row", axes = F)
im1_gr <- enorm(imgradient(grayscale(im1),"xy"))
im1_bw <- as.data.frame(im1_gr)
im1_bw$id <- 1:length(im1_bw$x)
plot(im1_gr, axes = F)
im1_bw
min(im1_bw$value)
max(im1_bw$value)
library(devtools)
devtools::document()
install.packages("progress")
pb <- progress_bar$new(total = 100)
for (i in 1:100) {
pb$tick()
Sy
pb <- progress_bar$new(total = 100)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
pb <- progress_bar$new(total = 100)
library(progress)
pb <- progress_bar$new(total = 100)
pb <- progress_bar$new(total = 100)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
pb <- progress_bar$new(total = 300)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
pb <- progress_bar$new(total = 300)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
## ETA
pb <- progress_bar$new(
format = " downloading [:bar] :percent eta: :eta",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
## ETA
pb <- progress_bar$new(
format = " analyzing [:bar] :percent elapsed: :elapsed",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
## ETA
pb <- progress_bar$new(
format = " analyzing [:bar] :percent elapsed: :elapsed",
total = 300, clear = FALSE, width= 60)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
## ETA
pb <- progress_bar$new(
format = " analyzing [:bar] :percent elapsed: :elapsed",
total = 300, clear = FALSE)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
## ETA
pb <- progress_bar$new(
format = " analyzing [:bar] :percent elapsed: :elapsed",
total = 300, clear = FALSE, width = 80)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
## ETA
pb <- progress_bar$new(
format = " analyzing [:bar] :percent   elapsed: :elapsed",
total = 300, clear = FALSE, width = 80)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
ct_overlay <- function(images,
contourvalue = .1,
color = "red",
regions = 1)
{
## Load in reference image
im <- imager::load.image(images[1])
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(imager::enorm(imager::imgradient(imager::grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions) {
im_roi <- imager::grabRect(im, output = "coord")
roi2 <- dplyr::filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- dplyr::distinct(roi)
## Progress Bar
pb <- progress_bar$new(
format = " recoloring images  [:bar]  :percent  elapsed: :elapsed",
total = length(images), clear = FALSE, width = 80)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Find contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- imager::as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
# Save new photo
image_split1 <- stringr::str_split(images[1], "\\.")[[1]]
image_end1 <- image_split1[length(image_split1)]
image_name1 <- paste(image_split1[1], "_contourr.", image_end1, sep = "")
grDevices::jpeg(image_name1, width = dim(im)[1], height = dim(im)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im) # plot new image
dev.off() # stop and save image file with contours drawn on it
pb$tick()
## Apply the "mask" to new images
for (i in 2:length(images)) {
## Load in new image
im2 <- imager::load.image(images[i])
im2_df <- as.data.frame(im2)
im2_df$id <- im_df$id
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im2 <- imager::as.cimg(im2_df, dim = dim(im2))
par(mar = c(0,0,0,0))
plot(im2)
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
# Save new photo
grDevices::jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im2) # plot new image
dev.off() # stop and save image file with contours drawn on it
pb$tick()
} # End of recolor new images
}
setwd("C://Users/stri7929/Documents/Snowstake_Photos")
getwd()
dir(getwd())
dir(getwd())
im <- dir(getwd())
ct_overlay(im)
ct_overlay(im)
ct_overlay <- function(images,
contourvalue = .1,
color = "red",
regions = 1,
show_image = TRUE)
{
## Load in reference image
im <- imager::load.image(images[1])
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(imager::enorm(imager::imgradient(imager::grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions) {
im_roi <- imager::grabRect(im, output = "coord")
roi2 <- dplyr::filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- dplyr::distinct(roi)
## Progress Bar
pb <- progress_bar$new(
format = " recoloring images  [:bar]  :percent  elapsed: :elapsed",
total = length(images), clear = FALSE, width = 80)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Find contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- imager::as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
# Save new photo
image_split1 <- stringr::str_split(images[1], "\\.")[[1]]
image_end1 <- image_split1[length(image_split1)]
image_name1 <- paste(image_split1[1], "_contourr.", image_end1, sep = "")
grDevices::jpeg(image_name1, width = dim(im)[1], height = dim(im)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im) # plot new image
dev.off() # stop and save image file with contours drawn on it
pb$tick()
## Apply the "mask" to new images
for (i in 2:length(images)) {
## Load in new image
im2 <- imager::load.image(images[i])
im2_df <- as.data.frame(im2)
im2_df$id <- im_df$id
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im2 <- imager::as.cimg(im2_df, dim = dim(im2))
if (show_image = TRUE) {
par(mar = c(0,0,0,0))
plot(im2)
}
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
grDevices::jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2])
par(mar = c(0,0,0,0))
plot(im2)
dev.off()
pb$tick()
} # End of recolor new images
}
ct_overlay <- function(images,
contourvalue = .1,
color = "red",
regions = 1,
show_image = TRUE)
{
## Load in reference image
im <- imager::load.image(images[1])
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(imager::enorm(imager::imgradient(imager::grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(grDevices::col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions) {
im_roi <- imager::grabRect(im, output = "coord")
roi2 <- dplyr::filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- dplyr::distinct(roi)
## Progress Bar
pb <- progress_bar$new(
format = " recoloring images  [:bar]  :percent  elapsed: :elapsed",
total = length(images), clear = FALSE, width = 80)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Find contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- imager::as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
# Save new photo
image_split1 <- stringr::str_split(images[1], "\\.")[[1]]
image_end1 <- image_split1[length(image_split1)]
image_name1 <- paste(image_split1[1], "_contourr.", image_end1, sep = "")
grDevices::jpeg(image_name1, width = dim(im)[1], height = dim(im)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im) # plot new image
dev.off() # stop and save image file with contours drawn on it
pb$tick()
## Apply the "mask" to new images
for (i in 2:length(images)) {
## Load in new image
im2 <- imager::load.image(images[i])
im2_df <- as.data.frame(im2)
im2_df$id <- im_df$id
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im2 <- imager::as.cimg(im2_df, dim = dim(im2))
if (show_image == TRUE) {
par(mar = c(0,0,0,0))
plot(im2)
}
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
grDevices::jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2])
par(mar = c(0,0,0,0))
plot(im2)
dev.off()
pb$tick()
} # End of recolor new images
}
ct_overlay(im, show_image = F)
## Elapsed time
pb <- progress_bar$new(
format = " downloading [:bar] :percent in :elapsed",
total = 100, clear = FALSE, width= 60)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
## Elapsed time
pb <- progress_bar$new(
format = " downloading [:bar] :percent in :elapsed",
total = 300, clear = FALSE, width= 60)
for (i in 1:300) {
pb$tick()
Sys.sleep(1 / 100)
}
devtools::document()
getwd()
library(devtools)
document()
document()
