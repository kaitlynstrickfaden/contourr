image_start1 <- str_flatten(image_split1[c(1:length(image_split1) - 1)], collapse = ".")
image_end1 <- image_split1[length(image_split1)]
image_name1 <- paste(image_start1, "_contourr.", image_end1, sep = "")
grDevices::jpeg(image_name1, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
## Recolor other images
for (i in 2:length(images)) {
## Load in new image
im2 <- imager::load.image(images[i])
im2_df <- as.data.frame(im2)
im2_df$id <- im_df$id
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2 <- imager::as.cimg(im2_df, dim = dim(im2))
## (Optionally) display the new image
if (show_image == TRUE) {
par(mar = c(0,0,0,0))
plot(im2)
}
## Save the new image
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_start <- str_flatten(image_split[c(1:length(image_split) - 1)], collapse = ".")
image_end <- image_split[length(image_split)]
image_name <- paste(image_start, "_contourr.", image_end, sep = "")
grDevices::jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2])
par(mar = c(0,0,0,0))
plot(im2)
dev.off()
pb$tick()
} # End of recolor new images
} # End of function
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
ct_overlay1(c(im1, im2), roi_in = roi1, color = "green1")
ct_overlay1(c(im1, im2), roi_in = roi1,
shift = c(100, -100), color = "deeppink1")
ct_overlay1(c(im1, im2), roi_in = roi1,
shift = c(200, -200), color = "deeppink1")
ct_overlay1(c(im1, im2), roi_in = roi1,
shift = c(200, -500), color = "deeppink1")
ct_overlay1(c(im1, im2), roi_in = roi1,
shift = c(200, -200), color = "deeppink1")
ct_overlay1(c(im1, im2), roi_in = roi1,
shift = c(200, -500), color = "deeppink1")
dim(load.image(im1))
load.image(im1)
getwd()
dim(load.image("images/image04.jpg"))
ct_overlay1(c(im1, im2), roi_in = roi1,
shift = c(200, -200), color = "deeppink1")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
ct_overlay1(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi2),
color = "orangered2")
roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
#roi2 <- imager::grabRect(imager::load.image(im1), output = "coord")
roi2 <- data.frame(x1 = 457, y1 = 501, x2 = 526, y2 = 1105)
ct_find1(im1, roi_in = rbind(roi1, roi2), regions = 2, color = "purple")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
#roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
roi3 <- data.frame(x1 = 1769, y1 = 49, x2 = 2038, y2 = 1470)
ct_overlay1(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "orangered2")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
#roi3 <- data.frame(x1 = 1769, y1 = 49, x2 = 2038, y2 = 1470)
ct_overlay1(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "orangered2")
roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
#roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
ct_overlay1(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "orangered2")
im2 <- "../images/image05.jpg"
im3 <- "../images/image06.jpg"
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
#roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
ct_overlay1(c(im1, im2),
ref_images = 2, roi_in = list(roi1, roi3),
color = "orangered2")
roi1 <- data.frame(x1 = 894, y1 = 538, x2 = 974, y2 = 1219)
#roi3 <- imager::grabRect(imager::load.image(im3), output = "coord")
roi3 <- data.frame(x1 = 1687, y1 = 66, x2 = 1761, y2 = 1219)
ct_overlay1(c(im1, im3),
ref_images = 2, roi_in = list(roi1, roi3),
color = "orangered2")
document()
library(devtools)
library(imager)
library(dplyr)
library(qpdf)
im3 <- load.image("../images/image02.jpg")
im3_df <- as.data.frame(im3)
im3_df$id <- 1:length(im1_bw$x)
knitr::opts_chunk$set(
fig.width = 8,
fig.height = 6,
collapse = TRUE,
comment = "#>"
)
library(imager)
library(dplyr)
library(qpdf)
im1 <- load.image("../images/image01.jpg")
im1_df <- as.data.frame(im1)
im1_df$id <- rep(1:(dim(im1)[1] * dim(im1)[2]), times = 3)
plot(im1)
red <- im1
red[,,,c(2:3)] <- c(0,0)
green <- im1
green[,,,c(1,3)] <- c(0,0)
blue <- im1
blue[,,,1:2] <- c(0,0)
par(mfrow = c(1,3), mar = c(.1,.1,.1,.1))
plot(red, axes = F)
plot(green, axes = F)
plot(blue, axes = F)
plot(grayscale(im1), axes = F)
par(mar = c(1,.1,1,.1))
im1_xy <- imgradient(grayscale(im1), "xy")
plot(im1_xy, layout = "row", axes = F)
im1_gr <- enorm(imgradient(grayscale(im1),"xy"))
im1_bw <- as.data.frame(im1_gr)
im1_bw$id <- 1:length(im1_bw$x)
plot(im1_gr, axes = F)
#im_c <- grabRect(im1, output = "coord") # draw a box around the object of interest
im_c <- c(316,47,389,713)
plot(im1, axes = F)
rect(im_c[1], im_c[2], im_c[3], im_c[4], border = "cyan1")
roi <- filter(im1_bw,
im1_bw$x >= im_c[1] & im1_bw$x <= im_c[3] &
im1_bw$y >= im_c[2] & im1_bw$y <= im_c[4])
## Find contours in region of interest
roi_cv <- roi[roi$value >= .1,]
## Find contour pixels in full image
m <- im1_df$id[match(roi_cv$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("cyan1")/255
im1_df$value[im1_df$id %in% m] <- rep(rgbcolor, each = length(m))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
im3 <- load.image("../images/image02.jpg")
im3_df <- as.data.frame(im3)
im3_df$id <- 1:length(im1_bw$x)
plot(im3, axes = F)
im3_gr <- enorm(imgradient(grayscale(im3),"xy"))
im3_bw <- as.data.frame(im3_gr)
im3_bw$id <- 1:length(im3_bw$x)
roi <- filter(im3_bw,
im3_bw$x >= im_c[1] & im3_bw$x <= im_c[3] &
im3_bw$y >= im_c[2] & im3_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
m_df <- im3_df[match(roi_cv$id, im3_df$id),]
m_df$keep <- "Y"
for (i in seq_along(m_df$id)) {
if (m_df$x[i] + x_shift > dim(im3)[1]) {
m_df$keep[i] <- "N" }
if (m_df$x[i] + x_shift < 0) {
m_df$keep[i] <- "N" }
if (m_df$y[i] + y_shift > dim(im3)[2]) {
m_df$keep[i] <- "N" }
if (m_df$y[i] + y_shift < 0) {
m_df$keep[i] <- "N" }
}
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2 <- load.image("../images/image02.jpg")
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2_bw <- as.data.frame(im2_gr)
im2_bw$id <- 1:length(im2_bw$x)
roi <- filter(im2_bw,
im2_bw$x >= im_c[1] & im2_bw$x <= im_c[3] &
im2_bw$y >= im_c[2] & im2_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
## Find contour pixels in full image
m <- im2_df$id[match(roi_cv$id, im2_df$id)]
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
im2_df$value[im2_df$id %in% m1] <- rep(rgbcolor, each = length(m1))
knitr::opts_chunk$set(
fig.width = 8,
fig.height = 6,
collapse = TRUE,
comment = "#>"
)
library(imager)
library(dplyr)
library(qpdf)
im1 <- load.image("../images/image01.jpg")
im1_df <- as.data.frame(im1)
im1_df$id <- rep(1:(dim(im1)[1] * dim(im1)[2]), times = 3)
plot(im1)
red <- im1
red[,,,c(2:3)] <- c(0,0)
green <- im1
green[,,,c(1,3)] <- c(0,0)
blue <- im1
blue[,,,1:2] <- c(0,0)
par(mfrow = c(1,3), mar = c(.1,.1,.1,.1))
plot(red, axes = F)
plot(green, axes = F)
plot(blue, axes = F)
plot(grayscale(im1), axes = F)
par(mar = c(1,.1,1,.1))
im1_xy <- imgradient(grayscale(im1), "xy")
plot(im1_xy, layout = "row", axes = F)
im1_gr <- enorm(imgradient(grayscale(im1),"xy"))
im1_bw <- as.data.frame(im1_gr)
im1_bw$id <- 1:length(im1_bw$x)
plot(im1_gr, axes = F)
#im_c <- grabRect(im1, output = "coord") # draw a box around the object of interest
im_c <- c(316,47,389,713)
plot(im1, axes = F)
rect(im_c[1], im_c[2], im_c[3], im_c[4], border = "cyan1")
roi <- filter(im1_bw,
im1_bw$x >= im_c[1] & im1_bw$x <= im_c[3] &
im1_bw$y >= im_c[2] & im1_bw$y <= im_c[4])
## Find contours in region of interest
roi_cv <- roi[roi$value >= .1,]
## Find contour pixels in full image
m1 <- im1_df$id[match(roi_cv$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("cyan1")/255
im1_df$value[im1_df$id %in% m1] <- rep(rgbcolor, each = length(m1))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
im2 <- load.image("../images/image02.jpg")
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2_bw <- as.data.frame(im2_gr)
im2_bw$id <- 1:length(im2_bw$x)
roi <- filter(im2_bw,
im2_bw$x >= im_c[1] & im2_bw$x <= im_c[3] &
im2_bw$y >= im_c[2] & im2_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
## Find contour pixels in full image
m2 <- im2_df$id[match(roi_cv$id, im2_df$id)]
im2_df$value[im2_df$id %in% m2] <- rep(rgbcolor, each = length(m2))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
im2_df$value[im2_df$id %in% m1] <- rep(rgbcolor, each = length(m1))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
knitr::opts_chunk$set(
fig.width = 8,
fig.height = 6,
collapse = TRUE,
comment = "#>"
)
library(imager)
library(dplyr)
library(qpdf)
im1 <- load.image("../images/image01.jpg")
im1_df <- as.data.frame(im1)
im1_df$id <- rep(1:(dim(im1)[1] * dim(im1)[2]), times = 3)
plot(im1)
red <- im1
red[,,,c(2:3)] <- c(0,0)
green <- im1
green[,,,c(1,3)] <- c(0,0)
blue <- im1
blue[,,,1:2] <- c(0,0)
par(mfrow = c(1,3), mar = c(.1,.1,.1,.1))
plot(red, axes = F)
plot(green, axes = F)
plot(blue, axes = F)
plot(grayscale(im1), axes = F)
par(mar = c(1,.1,1,.1))
im1_xy <- imgradient(grayscale(im1), "xy")
plot(im1_xy, layout = "row", axes = F)
im1_gr <- enorm(imgradient(grayscale(im1),"xy"))
im1_bw <- as.data.frame(im1_gr)
im1_bw$id <- 1:length(im1_bw$x)
plot(im1_gr, axes = F)
#im_c <- grabRect(im1, output = "coord") # draw a box around the object of interest
im_c <- c(316,47,389,713)
plot(im1, axes = F)
rect(im_c[1], im_c[2], im_c[3], im_c[4], border = "cyan1")
roi <- filter(im1_bw,
im1_bw$x >= im_c[1] & im1_bw$x <= im_c[3] &
im1_bw$y >= im_c[2] & im1_bw$y <= im_c[4])
## Find contours in region of interest
roi_cv <- roi[roi$value >= .1,]
## Find contour pixels in full image
m1 <- im1_df$id[match(roi_cv$id, im1_df$id)]
## Recolor contour pixels in full image
rgbcolor <- col2rgb("cyan1")/255
im1_df$value[im1_df$id %in% m1] <- rep(rgbcolor, each = length(m1))
im1_new <- as.cimg(im1_df, dim = dim(im1))
plot(im1_new, axes = F)
rgbcolor <- "purple"
im2 <- load.image("../images/image02.jpg")
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
plot(im2, axes = F)
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2_bw <- as.data.frame(im2_gr)
im2_bw$id <- 1:length(im2_bw$x)
roi <- filter(im2_bw,
im2_bw$x >= im_c[1] & im2_bw$x <= im_c[3] &
im2_bw$y >= im_c[2] & im2_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
## Find contour pixels in full image
m2 <- im2_df$id[match(roi_cv$id, im2_df$id)]
im2_df$value[im2_df$id %in% m2] <- rep(rgbcolor, each = length(m2))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2_bw <- as.data.frame(im2_gr)
im2_bw$id <- 1:length(im2_bw$x)
roi <- filter(im2_bw,
im2_bw$x >= im_c[1] & im2_bw$x <= im_c[3] &
im2_bw$y >= im_c[2] & im2_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
## Find contour pixels in full image
m2 <- im2_df$id[match(roi_cv$id, im2_df$id)]
im2_df$value[im2_df$id %in% m2] <- rep(rgbcolor, each = length(m2))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
rgbcolor <- "purple"
im2 <- load.image("../images/image02.jpg")
im2_df <- as.data.frame(im2)
im2_df$id <- rep(1:(dim(im2)[1] * dim(im2)[2]), times = 3)
plot(im2, axes = F)
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2_bw <- as.data.frame(im2_gr)
im2_bw$id <- 1:length(im2_bw$x)
roi <- filter(im2_bw,
im2_bw$x >= im_c[1] & im2_bw$x <= im_c[3] &
im2_bw$y >= im_c[2] & im2_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
## Find contour pixels in full image
m2 <- im2_df$id[match(roi_cv$id, im2_df$id)]
im2_df$value[im2_df$id %in% m2] <- rep(rgbcolor, each = length(m2))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
rm(m)
rgbcolor <- "purple"
im2 <- load.image("../images/image02.jpg")
im2_df <- as.data.frame(im2)
im2_df$id <- rep(1:(dim(im2)[1] * dim(im2)[2]), times = 3)
plot(im2, axes = F)
im2_gr <- enorm(imgradient(grayscale(im2),"xy"))
im2_bw <- as.data.frame(im2_gr)
im2_bw$id <- 1:length(im2_bw$x)
roi <- filter(im2_bw,
im2_bw$x >= im_c[1] & im2_bw$x <= im_c[3] &
im2_bw$y >= im_c[2] & im2_bw$y <= im_c[4])
roi_cv <- roi[roi$value >= .05,]
## Find contour pixels in full image
m2 <- im2_df$id[match(roi_cv$id, im2_df$id)]
rgbcolor <- col2rgb("purple")/255
im2_df$value[im2_df$id %in% m2] <- rep(rgbcolor, each = length(m2))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
im2_df <- as.data.frame(im2)
im2_df$id <- 1:length(im1_bw$x)
im2_df$value[im2_df$id %in% m1] <- rep(rgbcolor, each = length(m1))
im2_new <- as.cimg(im2_df, dim = dim(im2))
plot(im2_new, axes = F)
document()
rm(list())
rm(list = c())
document()
library(rmarkdown)
rmarkdown::render("contourr_use.Rmd", output_format = "github_document")
rmarkdown::render("vignettes/contourr_use.Rmd", output_format = "github_document")
rmarkdown::render("vignettes/contourr_methodology.Rmd", output_format = "github_document")
data.frame(grabRect(im1))
list(1,2,3)
length(list(1,2,3))
is.data.frame(list(1,2,3))
is.list(list(1,2,3))
is.list(data.framec(1,2))
is.list(data.frame(c(1,2)))
is.data.frame(data.frame(c(1,2)))
length(data.frame(c(1,2)))
length(data.frame(c(1,2), c(1,2)))
is.character("red")
is.character("2")
is.character(2)
is.numeric(c(1,2))
is.numeric(c("a", "b"))
document()
document()
document()
ct_cvdf <- function(imagepaths, color = "red") {
if (is.vector(imagepaths)) {
for (i in seq_along(imagepaths)) {
if (file.exists(imagepaths[i]) == FALSE) {
stop(str_glue("imagepaths[", i, "] is not a valid path.", sep = "")) }
}
d <- data.frame(File = imagepaths, CV = 0)
}
if (is.data.frame(imagepaths)) {
d <- imagepaths
if ("File" %in% colnames(d) == FALSE) {
stop("input data frame must contain a column called 'File'") }
for (i in seq_along(d$File)) {
if (file.exists(d$File[i]) == FALSE) {
stop(str_glue("imagepaths$File[", i, "] is not a valid path", sep = "")) }
}
d$CV <- 0
}
if (is.vector(imagepaths) == FALSE & is.data.frame(imagepaths) == FALSE) {
stop("'imagepaths' must be a vector or data frame object")
}
for (i in seq_along(d$File)) {
done <- FALSE
refimage <- d$File[i]
cv <- .1
roi_in <- grabRect(refimage, output = "coord")
roi_in <- data.frame(roi_in[1], roi_in[2], roi_in[3], roi_in[4])
ct_find(refimage, roi_in = roi_in, contour_value = cv, color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
d[i,"CV"] <- cv
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = "Input new contour value: "))
ct_find(refimage, roi_in = roi_in, contour_value = cv, color = color)
done <- FALSE
}
} # end of while loop
} # end of for loop
return(d)
} # end of function
ims <- str_glue("C://Users/stri7929/Documents/GitHub/contourr/images", list.files("C://Users/stri7929/Documents/GitHub/contourr/images"), sep = "/")
library(str_glue)
library(stringr)
ims <- str_glue("C://Users/stri7929/Documents/GitHub/contourr/images", list.files("C://Users/stri7929/Documents/GitHub/contourr/images"), sep = "/")
ims <- str_c("C://Users/stri7929/Documents/GitHub/contourr/images", list.files("C://Users/stri7929/Documents/GitHub/contourr/images"), sep = "/")
ims
ims
ims <- str_c("C://Users/stri7929/Documents/GitHub/contourr/images", list.files("C://Users/stri7929/Documents/GitHub/contourr/images"), sep = "/")
ct_cvdf(ims)
library(imager)
library(contourr
)
ct_cvdf(ims)
ct_cvdf(data.frame(File = ims))
imdf <- data.frame(File = ims)
ct_cvdf(ims)
?ct_cvdf
ct_cvdf(imdf)
ct_cvdf <- function(imagepaths, color = "red") {
if (is.vector(imagepaths)) {
for (i in seq_along(imagepaths)) {
if (file.exists(imagepaths[i]) == FALSE) {
stop(str_glue("imagepaths[", i, "] is not a valid path.", sep = "")) }
}
d <- data.frame(File = imagepaths, CV = 0)
}
if (is.data.frame(imagepaths)) {
d <- imagepaths
if ("File" %in% colnames(d) == FALSE) {
stop("input data frame must contain a column called 'File'") }
for (i in seq_along(d$File)) {
if (file.exists(d$File[i]) == FALSE) {
stop(str_glue("imagepaths$File[", i, "] is not a valid path", sep = "")) }
}
d$CV <- 0
}
if (is.vector(imagepaths) == FALSE & is.data.frame(imagepaths) == FALSE) {
stop("'imagepaths' must be a vector or data frame object")
}
for (i in seq_along(d$File)) {
done <- FALSE
refimage <- d$File[i]
cv <- .1
roi_in <- grabRect(imager::load.image(refimage), output = "coord")
roi_in <- data.frame(roi_in[1], roi_in[2], roi_in[3], roi_in[4])
ct_find(refimage, roi_in = roi_in, contour_value = cv, color = color)
while (done == FALSE) {
interactive()
x <- readline(prompt = "Is this a good contour value? Input Y for yes or N for no: ")
if (x == "Y") {
d[i,"CV"] <- cv
done <- TRUE
}
if (x != "Y") {
cv <- as.numeric(readline(prompt = "Input new contour value: "))
ct_find(refimage, roi_in = roi_in, contour_value = cv, color = color)
done <- FALSE
}
} # end of while loop
} # end of for loop
return(d)
} # end of function
ims <- str_c("C://Users/stri7929/Documents/GitHub/contourr/images", list.files("C://Users/stri7929/Documents/GitHub/contourr/images"), sep = "/")
imdf <- data.frame(File = ims)
ct_cvdf(imdf)
rmarkdown::render("vignettes/contourr_use.Rmd", output_format = "github_document")
