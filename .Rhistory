im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im2 <- as.cimg(im2_df, dim = dim(im2))
par(mar = c(0,0,0,0))
plot(im2)
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_end <- image_split[length(image_split)]
# image_name <- stringr::str_replace(images[i],
#                                    paste(".", image_end, sep = ""),
#                                    paste("_contourr.", image_end, sep = ""))
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
# Save new photo
jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im2) # plot new image
dev.off() # stop and save image file with contours drawn on it
} # End of recolor new images
Sys.time() - st
}
ct_overlay(images, contourvalue = .15)
ct_overlay <- function(images,
contourvalue = .1,
color = "red",
regions = 1)
{
st <- Sys.time()
## Load in reference image
im <- imager::load.image(images[1])
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
x >= im_roi[1] & x <= im_roi[3] &
y >= im_roi[2] & y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Find contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
# Save new photo
image_split1 <- stringr::str_split(images[1], "\\.")[[1]]
image_end1 <- image_split1[length(image_split1)]
# image_name <- stringr::str_replace(images[i],
#                                    paste(".", image_end, sep = ""),
#                                    paste("_contourr.", image_end, sep = ""))
image_name1 <- paste("contourr_images/", image_split1[1], "_contourr.", image_end1, sep = "")
jpeg(image_name1, width = dim(im)[1], height = dim(im)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im) # plot new image
dev.off() # stop and save image file with contours drawn on it
## Apply the "mask" to new images
for (i in 2:length(images)){
## Load in new image
im2 <- load.image(images[i])
im2_df <- as.data.frame(im2)
im2_df$id <- im_df$id
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im2 <- as.cimg(im2_df, dim = dim(im2))
par(mar = c(0,0,0,0))
plot(im2)
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste("contourr_images/", image_split[1], "_contourr.", image_end, sep = "")
# Save new photo
jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im2) # plot new image
dev.off() # stop and save image file with contours drawn on it
} # End of recolor new images
Sys.time() - st
}
ct_overlay(images, contourvalue = .15)
ct_overlay <- function(images,
contourvalue = .1,
color = "red",
regions = 1)
{
st <- Sys.time()
## Load in reference image
im <- imager::load.image(images[1])
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
x >= im_roi[1] & x <= im_roi[3] &
y >= im_roi[2] & y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Find contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
# Save new photo
image_split1 <- stringr::str_split(images[1], "\\.")[[1]]
image_end1 <- image_split1[length(image_split1)]
# image_name <- stringr::str_replace(images[i],
#                                    paste(".", image_end, sep = ""),
#                                    paste("_contourr.", image_end, sep = ""))
image_name1 <- paste(image_split1[1], "_contourr.", image_end1, sep = "")
jpeg(image_name1, width = dim(im)[1], height = dim(im)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im) # plot new image
dev.off() # stop and save image file with contours drawn on it
## Apply the "mask" to new images
for (i in 2:length(images)){
## Load in new image
im2 <- load.image(images[i])
im2_df <- as.data.frame(im2)
im2_df$id <- im_df$id
## Recolor contour pixels in full image
im2_df$value[im2_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im2 <- as.cimg(im2_df, dim = dim(im2))
par(mar = c(0,0,0,0))
plot(im2)
image_split <- stringr::str_split(images[i], "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
# Save new photo
jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2]) # begin creation of an image file
par(mar = c(0,0,0,0)) # remove axes and margins
plot(im2) # plot new image
dev.off() # stop and save image file with contours drawn on it
} # End of recolor new images
Sys.time() - st
}
ct_overlay(images, contourvalue = .15)
?paste
?file.path
file.path(image_split1[1], "_contourr.", image_end1, sep = "")
dir.create("contourr_images")
dir.create("images/contourr_images")
library(devtools)
document()
document()
document()
library(contour)
library(imager
)
library(stringr)
im <- load.image("C://Users/stri7929/Documents/Snow Modeling/Snow/image01.jog")
im <- load.image("C://Users/stri7929/Documents/Snow Modeling/Snow/image01.jpg")
ct_find <- function(image,
contourvalue = 0.1,
color = "red",
regions = 1,
save = FALSE)
{
## Load in the image
im <- imager::load.image(image)
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
x >= im_roi[1] & x <= im_roi[3] &
y >= im_roi[2] & y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Match contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
## Save new image if save == TRUE
if (save == TRUE){
dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste("contourr_images/", image_split[1], "_contourr.", image_end, sep = "")
jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
} # End of save == TRUE
}
ct_find(im)
?imager
?imager::load.image
ct_find <- function(image,
contourvalue = 0.1,
color = "red",
regions = 1,
save = FALSE)
{
## Load in the image
im <- imager::load.image(image)
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
x >= im_roi[1] & x <= im_roi[3] &
y >= im_roi[2] & y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Match contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
## Save new image if save == TRUE
if (save == TRUE){
#dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
} # End of save == TRUE
}
ct_find(im)
ct_find(im)
im <- "C://Users/stri7929/Documents/Snow Modeling/Snow/image01.jpg"
ct_find(im)
ct_find <- function(image,
contourvalue = 0.1,
color = "red",
regions = 1,
save = FALSE)
{
## Load in the image
im <- imager::load.image(image)
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Match contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
## Save new image if save == TRUE
if (save == TRUE){
#dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
} # End of save == TRUE
}
ct_find(im)
library(stringr)
ct_find(im)
library(dplyr)
ct_find(im)
ct_find <- function(image,
contourvalue = 0.1,
color = "red",
regions = 1,
save = FALSE)
{
## Load in the image
im <- imager::load.image(image)
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Match contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
## Save new image if save == TRUE
if (save == TRUE){
dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste("contourr_images/", image_split[1], "_contourr.", image_end, sep = "")
jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
} # End of save == TRUE
}
ct_find(im, save = T)
image <- "C://Users/stri7929/Documents/Snow Modeling/Snow/image01.jpg"
rm(im)
ct_find <- function(image,
contourvalue = 0.1,
color = "red",
regions = 1,
save = FALSE)
{
## Load in the image
im <- imager::load.image(image)
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Match contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
## Save new image if save == TRUE
if (save == TRUE){
dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste("contourr_images/", image_split[1], "_contourr.", image_end, sep = "")
jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
} # End of save == TRUE
}
ct_find(image, save = T)
dev.off()
ct_find(image, save = T)
dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_split
ct_find <- function(image,
contourvalue = 0.1,
color = "red",
regions = 1,
save = FALSE)
{
## Load in the image
im <- imager::load.image(image)
im_df <- as.data.frame(im)
## Manipulate image for finding contours & make into df
im_bw <- as.data.frame(enorm(imgradient(grayscale(im),"xy")))
## Assign unique pixel values for indexing
im_df$id <- rep(1:length(im_bw$x), times = 3)
im_bw$id <- 1:length(im_bw$x)
## Find RGB value of selected color
rgbcolor <- as.vector(col2rgb(color)/255)
## Define region of interest
roi <- NULL
for (i in 1:regions){
im_roi <- grabRect(im, output = "coord")
roi2 <- filter(im_bw,
im_bw$x >= im_roi[1] & im_bw$x <= im_roi[3] &
im_bw$y >= im_roi[2] & im_bw$y <= im_roi[4])
roi <- rbind(roi, roi2)
} # End of regions
roi <- distinct(roi)
## Find contours in region of interest
roi_c <- roi[roi$value >= contourvalue,]
## Match contour pixels in full image
m <- im_df$id[match(roi_c$id, im_df$id)]
## Recolor contour pixels in full image
im_df$value[im_df$id %in% m] <- rep(rgbcolor, each = length(m))
## Display the new image
im <- as.cimg(im_df, dim = dim(im))
par(mar = c(0,0,0,0))
plot(im)
## Save new image if save == TRUE
if (save == TRUE){
#dir.create("contourr_images")
image_split <- str_split(image, "\\.")[[1]]
image_end <- image_split[length(image_split)]
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
jpeg(image_name, width = dim(im)[1], height = dim(im)[2])
par(mar = c(0,0,0,0))
plot(im)
dev.off()
} # End of save == TRUE
}
ct_find(image, save = T)
library(rmarkdown)
library(devtools)
document()
image_name <- paste(image_split[1], "_contourr.", image_end, sep = "")
# Save new photo
jpeg(image_name, width = dim(im2)[1], height = dim(im2)[2]) # begin creation of an image file
library(devtools)
document()
document()
document()
document()
document()
document()
install.packages("qpdf")
library(qpdf)
document()
document()
library(devtools)
document()
document()
document()
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
build()
